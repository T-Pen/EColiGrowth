install.packages(c("ggplot2", "growthrates", "pracma", "reshape2"))
source('D:/tpeng/OneDrive/OD__Universität/H__SynB/part_Axmann/git_repos/R/installPackages.R', echo=TRUE)
source('D:/tpeng/OneDrive/OD__Universität/H__SynB/part_Axmann/git_repos/R/installPackages.R', echo=TRUE)
install.packages("devtools")
library(platexpress)
library(reshape2)
library(pracma)
library(ggplot2)
library(mugro)
library(growthrates)
PC = T
INPATH <- "tpeng/OneDrive/OD__Universität/BA__Axmann"
expid <- "25_Ecoli_2020_REDUCTION-1"
MaxConc = c("glc" = 22.2*6*0.4,
"ace" = 66.6*2*0.4)
#======================================= functions =======================================
findSat = function(mat, npoints, timeOnCol = T){
if(!timeOnCol){mat = t(mat)}
endVal = ncol(mat)
mat = melt(mat)
mat$Var2 = as.numeric(mat$Var2)
startVar = var(mat$value)
minVar = startVar
minVar_x = 1
currRange = c(1,endVal)
for(x in 1:(as.integer(endVal/npoints)+1)*2){
evalsAll = round(linspace(x1 = currRange[1], x2 = currRange[2], n = npoints + 2)) #evaluated points
evalsAll = unique(evalsAll)
evals = evalsAll[c(-1, -length(evalsAll))]
evals_var=
sapply(evals, function(newStart){
var(mat[mat$Var2>=newStart,"value"])
})
evals_var = evals_var/(endVal - evals)
evals_best = which.min(evals_var)
evals_min = evals_var[evals_best]
if(evals_min<minVar){
minVar_x = evals[evals_best]
minVar = evals_min
currRange = evalsAll[c(evals_best, evals_best+2)]
}else{
return(minVar_x)
}
}
return(minVar_x)
}
bestFrontLm = function(y, x){
df = data.frame(x,y)
groups = sort(unique(x))
lms = lapply(groups[-1], function(i){
lm(y~x, data=df[x<=i,])
})
rsqs = sapply(lms, function(i){
summary(i)$adj.r.squared
})
bestLm = which.max(rsqs)
res = list(includedX = groups[1:(bestLm+1)],
lm = lms[[bestLm]])
return(res)
}
O2PercToConc = function(perc, p = 21278.25){#perc = percent of O2 saturation, p = partial pressure of O2 in Pa (21% * 101,325 Pa)
#Henrys law : c_max = H_cp * p , max gas concentration in mol/m^3
H_cp = 1.3 * 10^(-5) #mol/(m^3*Pa)
c_max = H_cp * p * 10^(-3) #max O2 concentration in mol/l
c = c_max*perc*10 #*1000 (mol -> mmol), *0.01 (percent -> fraction=
return(c) #concentration in mmol/l
}
# O2concToRate = function(conc, c_max, kLa = 260){ #conc = O2 concentration in mmol/l, c_max = maximal O2 concentration after Henry-law, kLa = Oxygen transfer-coefficient, given by aeration setup
#   # for this BioLector the kLa is approximately 260 h^(-1) for 1ml and 500 rpm
#   rate = kLa * (c_max - conc) #mmol/(l h)
#
#   return(rate)
# }
ggplotDf = function(mat, groups, times){
mat = t(mat)
mat = as.data.frame(mat)
mat = cbind(groups, labels = row.names(mat), mat)
mat = melt(mat, id.vars = c("groups", "labels"),   variable.name = "times")
mat$labels = levels(mat$labels)[mat$labels]
mat$times = times[mat$times]
if(is.factor(mat$groups)){mat$groups = levels(mat$groups)[mat$groups]}
return(mat)
}
#=========================================================================================
if(PC){INPATHHeader = "D://"}else{INPATHHeader = "C://Users/"}
## conventional installation from CRAN
#install.packages("segmented") # piecewise linear segmentation
install.packages("deSolve") # ODE Solver
install.packages("deSolve")
## install development tools to allow installation from git repos
install.packages("devtools")
## load devtools
require(devtools)
## Thomas Petzoldt's `growthrates` package, development version
install_github("tpetzoldt/growthrates")
## in-house package to parse and analyze platereader data
devtools::install_github("raim/platexpress")
## in-house package to parse and analyze platereader data
devtools::install_github("raim/platexpress")
## in-house package to parse and analyze platereader data
devtools::install_github("raim/platexpress")
source('D:/tpeng/OneDrive/OD__Universität/BA__Axmann/R/biolector_eval.R', echo=TRUE)
PC = T
if(PC){INPATHHeader = "D://"}else{INPATHHeader = "C://Users/"}
load(paste0(INPATHHeader,"/tpeng/OneDrive/OD__Universität/BA__Axmann/biolector_evalDAT.RData"))
dat = dats$glc
dfg <- data2growthrates(dat, "biomass", plate=dat$layout)
#concentrations
concs = dat$layout[["amount"]][order(dat$layout$well)]
concsUniq = sort(unique(dat$layout$amount))
times=dat$Time
yield = coefs$glc$yield
bgColsGG = plts$glc$mods$bgColsGG
timeStartGG = plts$glc$mods$timeStartGG
labelFacetGG = plts$glc$mods$labelFacetGG
scatterPeaksGG = plts$glc$mods$scatterPeaksGG
#======================================= monod model =======================================
# mu <- mumax * s/(s + K)
# ds <- phi * (sin - s) - (mu/Y) * y
# dy <- (mu - phi) * y - d * y
#average the biomass per group for finding the parameters
biomassMean = sapply(concsUniq, function(x){
rowMeans(getData(dat, "biomass")[,concs == x], na.rm = T)
})
colnames(biomassMean) = concsUniq
#average the growthrates per group for finding K
growthrateMean = sapply(concsUniq, function(x){
rowMeans(getData(dat, "biomassSM.mu.dpseg")[,concs == x], na.rm = T)
})
colnames(growthrateMean) = concsUniq
#find Saturations for determining the final Biomass
sats = findSatGrouped(dat, "biomass", "amount")
ntimes=length(dat$Time)
#######################
odeTime <- inflateTimes(times, 3)
odeCoefsMintime = 3 #h
modelBM = matrix(nrow= length(odeTime), ncol = length(concsUniq))
odeKs = c()
odeCoefs = matrix(nrow=length(concsUniq), ncol=8, dimnames = list(concsUniq, c("s", "y", "phi", "sin", "mumax", "K", "Y", "d")))
odeCoefsMintime = which(times > odeCoefsMintime)[1]
for(concID in 2:length(concsUniq)){
startTime = 0
conc = concsUniq[concID]
initBM = biomassMean[1,concID]
maxBM = mean(biomassMean[sats[concID]:ntimes,concID])
maxRate = max(growthrateMean[odeCoefsMintime : length(times),concID], na.rm = T)
# K is the substrate concentration, where mu(max) is half-maximal
KTime = tail(which(growthrateMean[, concID]> maxRate*0.5), 1)
#KTime = times[KTime]
KBM = biomassMean[KTime, concID]
K = KBM/ yield #used up Substrate
K = conc - K
odeKs[concID] = K
names(odeKs)[concID] = as.character(KTime)
#initial values
yinit <- c(s=conc, y=initBM) #initial values for s (substrate) y (biomass)
poinit <- c(phi=0, sin=0, mumax= maxRate, K = K, Y= yield, d=0) #phi: dilution rate, sin: incoming substrate concentration if diluted, mumax: maximal growthrate, K: Saturation constant treating the growth as an enzymatic reaction
names(poinit) = c("phi", "sin", "mumax", "K", "Y", "d")
odeCoefs[concID,] = c(yinit, poinit)
odem <- ode(yinit, odeTime, ode_monod, poinit)
modelBM[,concID] = odem[,"y"]
}
modelDf = ggplotDf(modelBM, concsUniq, odeTime)
modelGG = geom_line(data = modelDf, aes(x=times, y=value, group=as.factor(labels), color="monod model"), size=1, )
plts$glc[["monodFit"]] =
plts$glc$biomassGG +
modelGG+
scale_color_manual(name = "fitted curves", values="purple")
ode_monod
mugro::ode_anacat
#======================================= functions =======================================
ode_anacatT = function (time, init, parms, ...)
{
with(as.list(c(parms, init)), {
adp <- axp - atp
mu_ab <- mumax_ab * s/(s + Ksab) * atp/(atp + Kaab)
mu_cd <- mumax_cd * s/(s + Kscd) * adp/(adp + Kacd)
mu_m <- mumax_m
args <- list(...)
if (!is.null(args[["funcd"]])) {
for (i in 1:length(funcd)) assign(names(funcd)[i],
do.call(funcd[[i]], as.list(c(init, parms))))
}
ds <- phi * (sin - s) - (mu_ab + mu_cd) * y
dy <- (mu_ab - phi) * y
datp = (n_cd * mu_cd - n_ab * mu_ab - mu_m) * Cc/Vc -
mu_ab * atp
fnctdefs <- NULL
if (!is.null(args[["funcd"]])) {
fnctdefs <- rep(NA, length(funcd))
names(fnctdefs) <- names(funcd)[i]
for (i in 1:length(funcd)) fnctdefs[i] <- get(names(funcd)[i])
}
list(c(ds, dy, datp), adp = adp, mu = mu_ab, mu_cd = mu_cd,
fnctdefs)
})
}
#======================================= functions =======================================
ode_anacatT = function (time, init, parms, ...)
{
with(as.list(c(parms, init)), {
adp <- axp - atp
mu_ab <- mumax_ab * t/(t + Ktab) * atp/(atp + Kaab)
mu_cd <- mumax_cd * t/(t + Ktcd) * adp/(adp + Kacd)
mu_t <- mumax_t * s/(s + Kst) * adp/(adp + Kat)
mu_m <- mumax_m
args <- list(...)
if (!is.null(args[["funcd"]])) {
for (i in 1:length(funcd)) assign(names(funcd)[i],
do.call(funcd[[i]], as.list(c(init, parms))))
}
ds <- phi * (sin - s) - mu_t * y
dt <- phi * (tin - t) + n_st * mu_t * y - (mu_ab + mu_cd) * y
dy <- (mu_ab - phi) * y
datp = (n_cd * mu_cd - n_ab * mu_ab - mu_m) * Cc/Vc +
n_t * mu_t - mu_ab * atp
fnctdefs <- NULL
if (!is.null(args[["funcd"]])) {
fnctdefs <- rep(NA, length(funcd))
names(fnctdefs) <- names(funcd)[i]
for (i in 1:length(funcd)) fnctdefs[i] <- get(names(funcd)[i])
}
list(c(ds, dt, dy, datp), adp = adp, mu = mu_ab, mu_cd = mu_cd, mu_t = mu_t,
fnctdefs)
})
}
ode_anacatT = function (time, init, parms, ...)
{
with(as.list(c(parms, init)), {
adp <- axp - atp
mu_t <- mumax_t * s/(s + Kst) * adp/(adp + Kat)
mu_ab <- mumax_ab * t/(t + Ktab) * atp/(atp + Kaab)
mu_cd <- mumax_cd * t/(t + Ktcd) * adp/(adp + Kacd)
mu_m <- mumax_m
args <- list(...)
if (!is.null(args[["funcd"]])) {
for (i in 1:length(funcd)) assign(names(funcd)[i],
do.call(funcd[[i]], as.list(c(init, parms))))
}
ds <- phi * (sin - s) - mu_t * y
dt <- phi * (tin - t) + n_st * mu_t * y - (mu_ab + mu_cd) * y
dy <- (mu_ab - phi) * y
datp = (n_cd * mu_cd - n_ab * mu_ab - mu_m) * Cc/Vc +
n_t * mu_t - mu_ab * atp
fnctdefs <- NULL
if (!is.null(args[["funcd"]])) {
fnctdefs <- rep(NA, length(funcd))
names(fnctdefs) <- names(funcd)[i]
for (i in 1:length(funcd)) fnctdefs[i] <- get(names(funcd)[i])
}
list(c(ds, dt, dy, datp), adp = adp, mu = mu_ab, mu_cd = mu_cd, mu_t = mu_t,
fnctdefs)
})
}
ode_monod
ode_monodT = function (time, init, parms, ...){
with(as.list(c(parms, init)), {
mu_t = mumax_t * s/(s + Kst)
mu <- mumax * t/(t + Kty)
ds <- phi * (sin - s) - mu_t * y
dt = phi * (tin - t) + (n_st * mu_t - (mu/(Y * n_st))) * y
dy <- (mu - phi) * y - d * y
list(c(ds, dy))
})
}
